#!/bin/bash
set -eou pipefail

url="${1:?url parameter required}"
audience="${2:?audience parameter required}"
profile="${3:?profile parameter required}"
action="${4:?action parameter required}"

# ignore unsupported actions without error
if [[ "${action}" != "get" ]]; then
    exit 0
fi
# read credential helper input from stdin
args="$(< /dev/stdin)"

# caches the OIDC token for 5 minutes, so that successive calls to the credential helper use the existing token
cache_file="/tmp/oidc_auth_token_${BUILDKITE_JOB_ID}.cache"
if [[ -f "${cache_file}" && -s "${cache_file}" && $(find "${cache_file}" -mmin -5) ]]; then
  oidc_auth_token="$(< "${cache_file}")"
else 
  # timings are output to stderr, which Git ignores.
  TIMEFORMAT='[oidc = %2Rs]'
  time {
    oidc_auth_token="$(buildkite-agent oidc request-token --claim pipeline_id --audience "${audience}")"
  }
  echo "${oidc_auth_token}" > "${cache_file}"
fi

# Request a token for the given repository from the remote server, using the
# OIDC JWT from the agent. The output of this request is in the expected format,
# so is sent to stdout to be read by git.
TIMEFORMAT='[token vendor = %2Rs]'
if [[ ${profile} == "default" ]]; then
  path="git-credentials"
else
  path="organization/git-credentials/${profile}"
fi

time curl --silent --show-error --fail \
  --request POST "${url}/${path}" \
  --data "${args}" \
  --header "Authorization: Bearer ${oidc_auth_token}" \
  --header "Content-Type: text/plain" \
  --header "Accept: text/plain"

